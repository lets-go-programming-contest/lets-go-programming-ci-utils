version: "3"

env:
  UTILS_DIR: '{{ .UTILS_DIR | default ".ci_utils"}}'
  COMMON_DIR: '{{ .COMMON_DIR | default ".ci_common"}}'

  STUDENT_REGEXP_PATTERN: "[a-z0-9]+.[a-z0-9]+"
  TASK_REGEXP_PATTERN: "task-[0-9-]+"
  LAB_FILES_REGEXP_PATTERN: '{{ printf "^%s/%s/.+$" .STUDENT_REGEXP_PATTERN .TASK_REGEXP_PATTERN }}'  

_common_vars: &COMMON_VARS
  TARGET: &TARGET_VAR
    sh: '{{ .TASKFILE_DIR }}/scripts/validate_rev.bash {{.TARGET | default "origin/main" }}'    
  HEAD: &HEAD_VAR
    sh: '{{ .TASKFILE_DIR }}/scripts/validate_rev.bash {{.HEAD | default "HEAD" }}'
  DIFF: &DIFF_VAR
    sh: 'TARGET="{{ .TARGET }}" HEAD="{{ .HEAD }}" {{ .TASKFILE_DIR }}/scripts/get_affected_files.bash'
  LAB_FILES: &LAB_FILES_VAR 
    sh: 'DIFF="{{ .DIFF }}" {{ .TASKFILE_DIR }}/scripts/get_lab_files.bash'
  STUDENTS: &STUDENTS_VAR
    sh: 'LAB_FILES="{{ .LAB_FILES }}" {{ .TASKFILE_DIR }}/scripts/get_students.bash'
  TASKS: &TASKS_VAR
    sh: 'TASKS="{{ .TASKS }}" {{ .TASKFILE_DIR }}/scripts/get_tasks.bash'
  NO_LAB_FILES: &NO_LAB_FILES_VAR
    sh: >- 
      {{ $diff := (splitList "\n" .DIFF) }}
      {{ $labFiles := (splitList "\n" .LAB_FILES) }}
      {{ $noLabFiles := (list) }}
      {{ range $i, $file := $diff }}
        {{ if not ($labFiles | has $file) }}
          {{ $noLabFiles = append $noLabFiles $file }}
        {{ end }}
      {{ end }}
      echo "{{ $noLabFiles | join "\n" }}"

includes:
  go: "{{ .UTILS_DIR }}/taskfiles/go.taskfile.yaml"
  docker: 
    taskfile: "./{{ .UTILS_DIR }}/deployment/docker/docker.taskfile.yaml"
    dir: "./{{ .UTILS_DIR }}/deployment/docker"

tasks:
  task:build:
    requires:
      vars: [STUDENT_NAME,TASK_NAME]
    vars:
      WORKDIR: "{{ .WORKDIR | default .USER_WORKING_DIR }}"
      SERVICES: 
        sh: "find {{ .STUDENT_NAME }}/{{ .TASK_NAME }}/cmd -type d -maxdepth 1 -mindepth 1"
    preconditions:
      - sh: test {{ len .SERVICES }} -ne 0
        msg: "Not services in cmd folder."
    dir: "{{ .WORKDIR }}"
    cmds:
      - echo "Found {{ len (splitList "\n"  .SERVICES) }} targets for build in cmd folder."
      - for:
          var: "SERVICES"
          as: "SERVICE"
        task: go:build
        vars:
          WORKDIR: "{{ .WORKDIR}}/{{ .STUDENT_NAME }}/{{ .TASK_NAME }}"
          TARGET_CMD: "cmd/$(basename {{ .SERVICE}})"
          OUTPUT: "{{ .WORKDIR }}/bin" 

  task:lint:
    requires:
      vars: [STUDENT_NAME, TASK_NAME]
    vars: 
      WORKDIR: "{{ .WORKDIR | default .USER_WORKING_DIR }}"
      CONFIGS_DESTINATIONS:
          - type: common
            dir: "{{ .COMMON_DIR }}/{{ .TASK_NAME }}/golangci.yaml" 
          - type: student
            dir: "{{ .WORKDIR }}/{{ .STUDENT_NAME }}/{{ .TASK_NAME}}/golangci.yaml"     
    dir: "{{ .WORKDIR }}"
    cmds:
      - for: 
          var: "CONFIGS_DESTINATIONS"
          as: "CONFIG"
        cmd: >-
          if [[ -f {{ .CONFIG.dir }} ]]; then
            WORKDIR="{{ .WORKDIR }}/{{ .STUDENT_NAME }}/{{ .TASK_NAME }}" CONFIG="{{ .CONFIG.dir }}" task go:lint
          else 
            printf "Lint config in {{ .CONFIG.type }} files not found.\tSkip.\n"
          fi 
        silent: true
  
  task:copy-files:
    internal: true
    requires:
      vars: [ SOURCE_DIR, TARGET_DIR ]
    vars: 
      WORKDIR: "{{ .WORKDIR | default .USER_WORKING_DIR }}"
    dir: "{{ .WORKDIR }}"
    status:
      - test -z $(diff -rq "{{ .SOURCE_DIR }}" "{{ .TARGET_DIR }}" 2>/dev/null)
    preconditions:  
      - sh: "mkdir -p {{ .TARGET_DIR }}"
        msg: "Failed to create {{ .TARGET_DIR }}"
    cmds: 
      - echo "Copy ci tests to the {{ .TARGET_DIR }}."
      - cp {{ .SOURCE_DIR }}/* {{ .TARGET_DIR}} 

  task:test:
    requires:
      vars: [ STUDENT_NAME, TASK_NAME ]
    vars:
      WORKDIR: "{{ .WORKDIR | default .USER_WORKING_DIR }}"
    cmds:
      - echo "Prepare test enviroment."
      - task: task:copy-files
        vars:
          WORKDIR: "{{ .WORKDIR }}/{{ .STUDENT_NAME }}/{{ .TASK_NAME }}"
          SOURCE_DIR: "{{ .COMMON_DIR }}/{{ .TASK_NAME }}/tests"
          TARGET_DIR: "tests/ci"
      - echo "Run go tests."
      - task: go:test
        vars:
          WORKDIR: "{{ .WORKDIR }}/{{ .STUDENT_NAME}}/{{ .TASK_NAME }}"
          BUILD_BIN: '{{ printf "%s/bin" .WORKDIR }}'
          SOURCE_DIR: '{{ printf "%s/%s/%s" .WORKDIR .STUDENT_NAME .TASK_NAME }}'
          STATIC_DIR: '{{ printf "%s/%s" .COMMON_DIR .TASK_NAME }}'

  task:sanity:files:
    env:
      WORKDIR: "{{ .WORKDIR | default .USER_WORKING_DIR }}"
    vars: 
      TARGET: *TARGET_VAR
      HEAD: *HEAD_VAR
      DIFF: *DIFF_VAR
      LAB_FILES: *LAB_FILES_VAR
      NO_LAB_FILES: *NO_LAB_FILES_VAR
    dir: "{{ .WORKDIR }}"
    cmds: 
      - cmd: |
          TARGET="{{.TARGET}}" \
          HEAD="{{.HEAD}}" \
          MAINTAINERS_FILE="{{.COMMON_DIR}}/MAINTAINERS" \
          FILES_FOR_CHECK="{{.NO_LAB_FILES}}" \
          {{ .TASKFILE_DIR }}/scripts/check_files_authors.bash
        silent: true
      - cmd: |
          echo "Affected files list:"
          {{ range $i, $file := (.DIFF | splitList "\n")  }}
            echo "- {{ $file }}"
          {{ end}}
        silent: true

  task:sanity:tasks:
    dir: "{{ .WORKDIR }}"
    vars:
      TARGET: *TARGET_VAR
      HEAD: *HEAD_VAR
      DIFF: *DIFF_VAR
      LAB_FILES: *LAB_FILES_VAR
      TASKS: *TASKS_VAR
    cmds:
      - cmd: |
          {{if not .TASKS }}
          echo "Changes for at least one task must be submitted in commits!" >&2
          exit 1
          {{end}}
        silent: true
      - cmd: |
          {{ $tasks := (splitList "\n" .TASKS) }}
          {{if gt (len $tasks) 1}}
            echo "The next tasks has been presented for review:" >&2
            {{range $i, $task := $tasks}}
              echo "- {{ $task }}" 
            {{end}}
            echo "However, commits should only contain changes for one task!" >&2
            exit 1
          {{else}}
            echo "Task {{ index $tasks 0 }} are accepted for automatic review!"
          {{end}}
        silent: true


  task:sanity:students:
    dir: "{{ .WORKDIR }}"
    vars:
      TARGET: *TARGET_VAR
      HEAD: *HEAD_VAR
      DIFF: *DIFF_VAR
      LAB_FILES: *LAB_FILES_VAR
      STUDENTS: *STUDENTS_VAR
    cmds:
      - cmd: |
          {{ if not .STUDENTS }}
          echo "Changes for at least one student must be submitted in commits!" >&2
          exit 1
          {{end}}
        silent: true
      - cmd: |
          {{ $students := (splitList "\n" .STUDENTS) }}
          {{if gt (len $students) 1}}
            echo "The work of the following students has been presented for review:" >&2
            {{range $i, $student := $students}}
              echo "- {{ $student }}" 
            {{end}}
            echo "However, commits should only contain changes for one student!" >&2
            exit 1
          {{else}}
            echo "Tasks by {{ index $students 0 }} are accepted for automatic review!"
          {{end}}
        silent: true

  get:students:
    dir: "{{ .WORKDIR }}"
    vars:
      TARGET: *TARGET_VAR
      HEAD: *HEAD_VAR
      DIFF: *DIFF_VAR
      LAB_FILES: *LAB_FILES_VAR
      STUDENTS: *STUDENTS_VAR
      FORMAT: '{{ .FORMAT | default "%s\n" }}'
    cmds:
      - cmd: |
          {{ if not .STUDENTS }}
            echo "Students not found." >&2
            exit 1
          {{end}}
        silent: true
      - cmd: printf "{{ .FORMAT }}" "{{ .STUDENTS }}"
        silent: true

  get:tasks:
    dir: "{{ .WORKDIR }}"
    vars:
      TARGET: *TARGET_VAR
      HEAD: *HEAD_VAR
      DIFF: *DIFF_VAR
      LAB_FILES: *LAB_FILES_VAR
      TASKS: *TASKS_VAR
      FORMAT: '{{ .FORMAT | default "%s\n" }}'
    cmds:
      - cmd: |
          {{ if not .TASKS }}
            echo "Tasks not found." >&2
            exit 1
          {{end}}
        silent: true
      - cmd: printf "{{ .FORMAT }}" "{{ .TASKS }}"
        silent: true
